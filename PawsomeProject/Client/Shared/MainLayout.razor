@inherits LayoutComponentBase
@inject NavigationManager navigationManager
@inject CustomStateProvider authStateProvider

<MudThemeProvider/>
<MudDialogProvider/>
<MudSnackbarProvider/>

<MudLayout Class="deep-purple lighten-5">
    <MudAppBar Elevation="0">
        <MudText Typo="Typo.h6">Pawsome</MudText>
        <MudSpacer/>
        <CartMenu/>
        <MudButton Color="Color.Inherit" OnClick="LogoutClick">Logout</MudButton>
         <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.End" OnClick="@((e) => MenuDrawerToggle())"/>
    </MudAppBar>

    <AuthorizeView>
        <Authorized>
            @if (context.User.IsInRole("Admin"))
            {
                <MudDrawer @bind-Open="_dashDrawerOpen" Elevation="1" Variant="@DrawerVariant.Mini" OpenMiniOnHover="true" >
                    <MudDrawerHeader Class="pa-3">
                        <MudIcon Icon="@Icons.Material.Filled.AdminPanelSettings" Size="Size.Large" />
                        @if(_dashDrawerOpen){
                            <MudText Typo="Typo.h6">Dashboard</MudText>
                        }
                    </MudDrawerHeader>
                    <DashNavMenu/>
                </MudDrawer>
            }

            @code {
                bool _dashDrawerOpen = false;
                void DashDrawerToggle() => _dashDrawerOpen = !_dashDrawerOpen;
            }
        </Authorized>
        <Authorizing>
            <h1>Loading ...</h1>
        </Authorizing>
    </AuthorizeView>
    <MudDrawer @bind-Open="_menuDrawerOpen" Elevation="1" Anchor="Anchor.End"  Variant="@DrawerVariant.Temporary">
        <MudDrawerHeader Class="pa-3">
            <MudText Typo="Typo.h6">Main Menu</MudText>
        </MudDrawerHeader>
        <NavMenu/>
    </MudDrawer>
 
    <MudMainContent>
        <MudContainer MaxWidth="MaxWidth.Large" Class="my-16 pt-16">
            @Body
        </MudContainer>
    </MudMainContent>
</MudLayout>

@code {
    bool _menuDrawerOpen = false;
    void MenuDrawerToggle() => _menuDrawerOpen = !_menuDrawerOpen;
}



@functions{

    [CascadingParameter]
    Task<AuthenticationState> AuthenticationState { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        if ((await AuthenticationState) == null || !(await AuthenticationState).User.Identity.IsAuthenticated)
        {
            navigationManager.NavigateTo("/login");
        }
    }

    async Task LogoutClick()
    {
        await authStateProvider.Logout();
        navigationManager.NavigateTo("/login");
    }

}